{"version":3,"sources":["react-auth0-spa.js","components/Home.js","components/LoggedIn.js","App.js","serviceWorker.js","history.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","Home","className","onClick","LoggedIn","products","setProducts","voted","setVoted","token","fetch","headers","Authorization","response","json","responseData","getProducts","vote","slug","type","index","method","body","JSON","stringify","ok","log","status","width","height","name","map","product","prodSlug","Slug","Name","Description","App","Boolean","hostname","match","createBrowserHistory","ReactDOM","render","domain","config","client_id","clientId","redirect_uri","origin","audience","push","targetUrl","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f87ce20.chunk.js","sourcesContent":["// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n      if (window.location.search.includes(\"code=\") &&\n          window.location.search.includes(\"state=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n      setIsAuthenticated(isAuthenticated);\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import React, { Fragment } from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Home = () => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <div className=\"jumbotron text-center mt-5\">\n          <h1>Go Language Evaluation</h1>\n          <p>Sign in to test authentication.</p>\n          {!isAuthenticated && (\n            <button className=\"btn btn-primary btn-lg btn-login btn-block\" onClick={() => loginWithRedirect({})}>SIGN IN</button>\n          )}\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Home;","import React, { useState, useEffect } from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { FiThumbsUp, FiThumbsDown } from \"react-icons/fi\";\n\nconst LoggedIn = () => {\n  const [products, setProducts] = useState([]);\n  const [voted, setVoted] = useState({\n    \"world-of-authcraft\": \"\",\n    \"ocean-explorer\": \"\",\n    \"dinosaur-park\": \"\",\n    \"cars-vr\": \"\",\n    \"robin-hood\": \"\",\n    \"real-world-vr\": \"\",\n  });\n\n  const {\n    getTokenSilently,\n    loading,\n    user,\n    logout,\n    isAuthenticated,\n  } = useAuth0();\n\n  useEffect(() => {\n    const getProducts = async () => {\n      try {\n        const token = await getTokenSilently();\n        // Send a GET request to the server and add the signed in user's\n        // access token in the Authorization header\n        const response = await fetch(\"http://localhost:8080/products\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        const responseData = await response.json();\n\n        setProducts(responseData);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    getProducts();\n  }, []);\n\n  const vote = async (slug, type, index) => {\n    try {\n      const token = await getTokenSilently();\n      // Send a POST request to the Go server for the selected product\n      // with the vote type\n      const response = await fetch(\n        `http://localhost:8080/products/${slug}/feedback`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n          body: JSON.stringify({ vote: type }),\n        }\n      );\n      // Since this is just for demonstration and we're not actually\n      // persisting this data, we'll just set the product vote status here\n      // if the product exists\n      if (response.ok) {\n        setVoted({\n          ...voted,\n          [slug]: [type],\n        });\n      } else console.log(response.status);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron text-center mt-5\">\n        {isAuthenticated && (\n          <span\n            className=\"btn btn-primary float-right\"\n            onClick={() => logout()}\n          >\n            LOG OUT\n          </span>\n        )}\n        <spacer type=\"horizontal\" width=\"100\" height=\"100\"></spacer>\n        <h1>Go Language Evaluation</h1>\n        <hr></hr>\n        <h2>Austin Gerner and Raymond Hear</h2>\n        <h3>Advanced Software Paradigms (CSCI 6221)</h3>\n        <spacer type=\"horizontal\" width=\"100\" height=\"100\"> </spacer>\n        <br></br>\n        <p>\n          Hi, {user.name}! This is a mock application to test Go's potential use in production.\n        </p>\n        <div className=\"row\">\n          {products.map(function (product, index) {\n            const prodSlug = product.Slug;\n            return (\n              <div className=\"col-sm-4\" key={index}>\n                <div className=\"card mb-4\">\n                  <div className=\"card-header\">{product.Name}</div>\n                  <div className=\"card-body\">{product.Description}</div>\n                  <div className=\"card-footer\">\n                    <a onClick={() => vote(product.Slug, \"Upvoted\", index)}\n                      className=\"btn btn-default float-left\">\n                      <FiThumbsUp />\n                    </a>\n                    <small className=\"text-muted\">{voted[prodSlug]}</small>\n                    <a onClick={() => vote(product.Slug, \"Downvoted\", index)}\n                      className=\"btn btn-default float-right\">\n                      <FiThumbsDown />\n                    </a>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoggedIn;","import React from 'react';\nimport './App.css';\nimport Home from './components/Home.js';\nimport LoggedIn from './components/LoggedIn.js';\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nconst App = () => {\n  const { isAuthenticated } = useAuth0();\n\n  const { loading } = useAuth0();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      {!isAuthenticated && (\n        <Home />\n      )}\n\n      {isAuthenticated && <LoggedIn />}\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all '\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","// src/history.js\n\nimport { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","// src/index.js\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./history\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\n// Wrap App in the Auth0Provider component\n// The domain and client_id values will be found in your Auth0 dashboard\n// ReactDOM.render(\n//   <Auth0Provider\n//     domain=\"dev-8-p2-x5k.us.auth0.com\"\n//     client_id=\"65IQG0uREZs0pS0rQg2cEjx45PsiCcW0\"\n//     redirect_uri={window.location.origin}\n//     onRedirectCallback={onRedirectCallback}\n//   >\n//     <App />\n//   </Auth0Provider>,\n//   document.getElementById(\"root\")\n// );\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    audience={config.audience}     // NEW - specify the audience value\n    onRedirectCallback={onRedirectCallback}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}